# Spring Boot properties
server.port: ${PORT:8080}

application:
  input.topic: ${SCHEMAS_TOPIC}
  output.topic: ${SCHEMA_AUDIT_TOPIC}
  output.topic.partitions: 1
  offset.seconds: ${OFFSET_SECONDS:300}
  poll.timeout.secs: ${POLL_TIMEOUT_SECS:30}

# Kafka Streams related properties
kafka:
  admin:
    bootstrap.servers: ${BOOTSTRAP_URL}
    security.protocol: ${SECURITY_PROTOCOL:PLAINTEXT}
    schema.registry.url: ${SCHEMA_REGISTRY_URL}
  consumer:
    client.id: ${CLIENT_ID}
    group.id: ${GROUP_ID}
    # increase for higher throughput
    max.poll.records: 500
    # prevent out of order messages when not using an idempotent producer
    max.in.flight.requests.per.connection: 1
    # higher for more throughput, 1 for less latency
    fetch.min.bytes: 1
    # reduce for lower latency
    fetch.max.wait.ms: 500
    # manually commit for high durability
    enable.auto.commit: false
    # avoid soft failures due to network latency
    session.timeout.ms: 30000
    avro.use.logical.type.converters: true
    key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
    value.deserializer: org.apache.kafka.common.serialization.StringDeserializer
    bootstrap.servers: ${BOOTSTRAP_URL}
    security.protocol: ${SECURITY_PROTOCOL:PLAINTEXT}
    schema.registry.url: ${SCHEMA_REGISTRY_URL}
    schema.cache.capacity: 5000
  producer:
    client.id: ${CLIENT_ID}
    # increase for higher throughput
    batch.size: 1
    # none for lower latency, lz4 for higher throughput
    compression.type: lz4
    # prevent out of order messages when not using an idempotent producer
    max.in.flight.requests.per.connection: 1
    # higher for more throughput (ms), 0 for less latency
    linger.ms: 0
    # reduce to 1 for lower latency
    acks: all
    avro.use.logical.type.converters: true
    key.serializer: org.apache.kafka.common.serialization.StringSerializer
    value.serializer: org.apache.kafka.common.serialization.StringSerializer
    bootstrap.servers: ${BOOTSTRAP_URL}
    security.protocol: ${SECURITY_PROTOCOL:PLAINTEXT}
    schema.registry.url: ${SCHEMA_REGISTRY_URL}