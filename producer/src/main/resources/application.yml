# Spring Boot properties
server.port: ${PORT:8080}

application:
  topic: ${TOPIC}
  partitions: ${PARTITIONS:1}
  schema: ${SCHEMA}
  messages: ${MESSAGES}
  batch.size: ${BATCH_SIZE}
  frequency.ms: ${FREQUENCY_MS:1000}

# Kafka properties
kafka:
  admin:
    bootstrap.servers: ${BOOTSTRAP_URL}
    security.protocol: ${SECURITY_PROTOCOL:PLAINTEXT}
    schema.registry.url: ${SCHEMA_REGISTRY_URL}
  producer:
    client.id: ${CLIENT_ID}
    # increase for higher throughput
    batch.size: 1
    # none for lower latency, lz4 for higher throughput
    compression.type: lz4
    # prevent out of order messages when not using an idempotent producer
    max.in.flight.requests.per.connection: 1
    # higher for more throughput (ms), 0 for less latency
    linger.ms: 0
    # reduce to 1 for lower latency
    acks: all
    avro.use.logical.type.converters: true
    key.serializer: org.apache.kafka.common.serialization.LongSerializer
    value.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
    bootstrap.servers: ${BOOTSTRAP_URL}
    security.protocol: ${SECURITY_PROTOCOL:PLAINTEXT}
    schema.registry.url: ${SCHEMA_REGISTRY_URL}
    interceptor.classes: com.mycompany.kafka.governance.data.protection.interceptors.DataProtectionProducerInterceptor