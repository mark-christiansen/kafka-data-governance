# Spring Boot properties
server.port: ${PORT:8080}

application:
  input.topic: ${INPUT_TOPIC}
  output.topic: ${OUTPUT_TOPIC}
  rules.topic: ${RULES_TOPIC}

# Kafka Streams related properties
kafka:
  admin:
    bootstrap.servers: ${BOOTSTRAP_URL}
    security.protocol: ${SECURITY_PROTOCOL:PLAINTEXT}
    schema.registry.url: ${SCHEMA_REGISTRY_URL}
  consumer:
    client.id: ${APP_ID}-rules-consumer
    group.id: ${GROUP_ID}-rules-consumer
    # increase for higher throughput
    max.poll.records: 500
    # prevent out of order messages when not using an idempotent producer
    max.in.flight.requests.per.connection: 1
    # higher for more throughput, 1 for less latency
    fetch.min.bytes: 1
    # reduce for lower latency
    fetch.max.wait.ms: 500
    # manually commit for high durability
    enable.auto.commit: false
    # avoid soft failures due to network latency
    session.timeout.ms: 30000
    key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
    value.deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
    bootstrap.servers: ${BOOTSTRAP_URL}
    security.protocol: ${SECURITY_PROTOCOL:PLAINTEXT}
    schema.registry.url: ${SCHEMA_REGISTRY_URL}
  streams:
    application.id: ${APP_ID}
    group.id: ${GROUP_ID}
    acks: all
    auto.reset.offset: earliest
    # broker connection configuration
    bootstrap.servers: ${BOOTSTRAP_URL}
    security.protocol:  ${SECURITY_PROTOCOL:PLAINTEXT}
    default.key.serde: io.confluent.kafka.streams.serdes.avro.GenericAvroSerde
    default.value.serde: io.confluent.kafka.streams.serdes.avro.GenericAvroSerde
    default.timestamp.extractor: org.apache.kafka.streams.processor.WallclockTimestampExtractor
    default.deserialization.exception.handler: org.apache.kafka.streams.errors.LogAndFailExceptionHandler
    default.production.exception.handler: org.apache.kafka.streams.errors.DefaultProductionExceptionHandler
    # for changelog topics and repartition topics, match other topics to guarantee fault tolerance
    replication.factor: -1
    request.timeout.ms: 60000
    session.timeout.ms: 30000
    #isolation.level: read_committed
    #processing.guarantee: exactly_once_beta
    retries: 2147483647
    enabled.idempotence: true
    max.in.flight.requests.per.connection: 1
    buffered.records.per.partition: 1000
    commit.interval.ms: 5000
    num.stream.threads: 1
    poll.ms: 100
    cache.max.bytes.buffering: 10485760
    # schema registry configuration
    schema.registry.url: ${SCHEMA_REGISTRY_URL}
    schema.registry.auth: false
    schema.cache.capacity: 2000
    #key.subject.name.strategy: io.confluent.kafka.serializers.subject.RecordNameStrategy
    #value.subject.name.strategy: io.confluent.kafka.serializers.subject.RecordNameStrategy
    topology.optimization: all
    auto.register.schemas: true
    use.latest.version: true
    latest.compatibility.strict: false